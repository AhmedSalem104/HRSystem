//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRSystem.Data.Entites.Payroll
{
    using global::System;  using global::System.Diagnostics.CodeAnalysis;
    using global::System.Data.Entity;
    using global::System.Data.Entity.Infrastructure;
    using global::System.Data.Entity.Core.Objects;
    using global::System.Linq;
    
    public partial class PayrollEntities : DbContext
    {
        public PayrollEntities()
            : base("name=PayrollEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<A> A { get; set; }
        public virtual DbSet<AbsenceDeduct> AbsenceDeducts { get; set; }
        public virtual DbSet<AbsenceDeductEmp> AbsenceDeductEmps { get; set; }
        public virtual DbSet<Appraisal> Appraisals { get; set; }
        public virtual DbSet<AppraisalsDetail> AppraisalsDetails { get; set; }
        public virtual DbSet<ApprovedPayroll> ApprovedPayrolls { get; set; }
        public virtual DbSet<ApprovedPayrollEmp> ApprovedPayrollEmps { get; set; }
        public virtual DbSet<AttendanceGroup> AttendanceGroups { get; set; }
        public virtual DbSet<AttendanceGroups_9> AttendanceGroups_9 { get; set; }
        public virtual DbSet<AttendanceGroupsTrx> AttendanceGroupsTrxes { get; set; }
        public virtual DbSet<AttendTrx> AttendTrxes { get; set; }
        public virtual DbSet<AttendTrxEmployee> AttendTrxEmployees { get; set; }
        public virtual DbSet<AttendType> AttendTypes { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BioStarTrx> BioStarTrxes { get; set; }
        public virtual DbSet<BioStarTrx2> BioStarTrx2 { get; set; }
        public virtual DbSet<BirthVacDec> BirthVacDecs { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<BonusCalculation> BonusCalculations { get; set; }
        public virtual DbSet<BonusEdit> BonusEdits { get; set; }
        public virtual DbSet<BonusEditEmp> BonusEditEmps { get; set; }
        public virtual DbSet<BonusList> BonusLists { get; set; }
        public virtual DbSet<BonusPayslip> BonusPayslips { get; set; }
        public virtual DbSet<CalcAttendanceF> CalcAttendanceFs { get; set; }
        public virtual DbSet<CalcAttendanceH> CalcAttendanceHs { get; set; }
        public virtual DbSet<Calculation> Calculations { get; set; }
        public virtual DbSet<CalculationsApproved> CalculationsApproveds { get; set; }
        public virtual DbSet<CalculationsDetail> CalculationsDetails { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<CHECKINOUT> CHECKINOUTs { get; set; }
        public virtual DbSet<CHECKINOUTSQL> CHECKINOUTSQLs { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<CustomPayroll> CustomPayrolls { get; set; }
        public virtual DbSet<CustomPayrollEmp> CustomPayrollEmps { get; set; }
        public virtual DbSet<DeathVacationD> DeathVacationDs { get; set; }
        public virtual DbSet<DecesionAbsenceNormalDeduction> DecesionAbsenceNormalDeductions { get; set; }
        public virtual DbSet<DecesionAbsenceNormalDeductionDay> DecesionAbsenceNormalDeductionDays { get; set; }
        public virtual DbSet<DecisionAbsenceDeduction> DecisionAbsenceDeductions { get; set; }
        public virtual DbSet<DecisionAbsenceDeductionFooter> DecisionAbsenceDeductionFooters { get; set; }
        public virtual DbSet<DecisionAllowance> DecisionAllowances { get; set; }
        public virtual DbSet<DecisionBonu> DecisionBonus { get; set; }
        public virtual DbSet<DecisionCancelDecision> DecisionCancelDecisions { get; set; }
        public virtual DbSet<DecisionChangeJob> DecisionChangeJobs { get; set; }
        public virtual DbSet<DecisionCompanionVac> DecisionCompanionVacs { get; set; }
        public virtual DbSet<DecisionDiscipline> DecisionDisciplines { get; set; }
        public virtual DbSet<DecisionEmployment> DecisionEmployments { get; set; }
        public virtual DbSet<DecisionEmploymentFooter> DecisionEmploymentFooters { get; set; }
        public virtual DbSet<DecisionEndService> DecisionEndServices { get; set; }
        public virtual DbSet<DecisionEndStopHand> DecisionEndStopHands { get; set; }
        public virtual DbSet<DecisionExceptionVacation> DecisionExceptionVacations { get; set; }
        public virtual DbSet<DecisionExpand> DecisionExpands { get; set; }
        public virtual DbSet<DecisionLegation> DecisionLegations { get; set; }
        public virtual DbSet<DecisionLegationEmployee> DecisionLegationEmployees { get; set; }
        public virtual DbSet<DecisionLongLegation> DecisionLongLegations { get; set; }
        public virtual DbSet<DecisionMoveEmp> DecisionMoveEmps { get; set; }
        public virtual DbSet<DecisionNewJob> DecisionNewJobs { get; set; }
        public virtual DbSet<DecisionNormalVacation> DecisionNormalVacations { get; set; }
        public virtual DbSet<DecisionNormalVacationFooter> DecisionNormalVacationFooters { get; set; }
        public virtual DbSet<DecisionOutOfDutyGroup> DecisionOutOfDutyGroups { get; set; }
        public virtual DbSet<DecisionOutOfDutyGroup2> DecisionOutOfDutyGroup2 { get; set; }
        public virtual DbSet<DecisionOutOfDutyGroupF> DecisionOutOfDutyGroupFs { get; set; }
        public virtual DbSet<DecisionOutOfDutyGroupF2> DecisionOutOfDutyGroupF2 { get; set; }
        public virtual DbSet<DecisionOutOfDutySpend> DecisionOutOfDutySpends { get; set; }
        public virtual DbSet<DecisionOutOfDutySpend2> DecisionOutOfDutySpend2 { get; set; }
        public virtual DbSet<DecisionOutOfDutySpendF> DecisionOutOfDutySpendFs { get; set; }
        public virtual DbSet<DecisionOutOfDutySpendF2> DecisionOutOfDutySpendF2 { get; set; }
        public virtual DbSet<DecisionPostmanBonu> DecisionPostmanBonus { get; set; }
        public virtual DbSet<DecisionReplacementVacation> DecisionReplacementVacations { get; set; }
        public virtual DbSet<DecisionResumeWork> DecisionResumeWorks { get; set; }
        public virtual DbSet<DecisionSchoolVacation> DecisionSchoolVacations { get; set; }
        public virtual DbSet<DecisionSchoolVacationDay> DecisionSchoolVacationDays { get; set; }
        public virtual DbSet<DecisionSickVacation> DecisionSickVacations { get; set; }
        public virtual DbSet<DecisionSingleLegation> DecisionSingleLegations { get; set; }
        public virtual DbSet<DecisionSingleOutOfDuty> DecisionSingleOutOfDuties { get; set; }
        public virtual DbSet<DecisionsList> DecisionsLists { get; set; }
        public virtual DbSet<DecisionStopHand> DecisionStopHands { get; set; }
        public virtual DbSet<DecisionViolation> DecisionViolations { get; set; }
        public virtual DbSet<DecisionWorker> DecisionWorkers { get; set; }
        public virtual DbSet<DecisionWorkerVacation> DecisionWorkerVacations { get; set; }
        public virtual DbSet<DecisionYearlyIncrease> DecisionYearlyIncreases { get; set; }
        public virtual DbSet<Degree> Degrees { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DeservedVacation> DeservedVacations { get; set; }
        public virtual DbSet<DialysisVecDec> DialysisVecDecs { get; set; }
        public virtual DbSet<EmpCard> EmpCards { get; set; }
        public virtual DbSet<EmpCount> EmpCounts { get; set; }
        public virtual DbSet<EmpDisclaimer> EmpDisclaimers { get; set; }
        public virtual DbSet<EmpImage> EmpImages { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeService> EmployeeServices { get; set; }
        public virtual DbSet<EmployeesTree> EmployeesTrees { get; set; }
        public virtual DbSet<EmployeesUserName> EmployeesUserNames { get; set; }
        public virtual DbSet<EmpPermission> EmpPermissions { get; set; }
        public virtual DbSet<EmpPermissionsDetail> EmpPermissionsDetails { get; set; }
        public virtual DbSet<EmpPermissionsR> EmpPermissionsRs { get; set; }
        public virtual DbSet<EmpPermissionsRDay> EmpPermissionsRDays { get; set; }
        public virtual DbSet<EmpPromotion> EmpPromotions { get; set; }
        public virtual DbSet<EmpStatusCode> EmpStatusCodes { get; set; }
        public virtual DbSet<EmpTransaction> EmpTransactions { get; set; }
        public virtual DbSet<EndedEmployee> EndedEmployees { get; set; }
        public virtual DbSet<FixedJob> FixedJobs { get; set; }
        public virtual DbSet<FPLocation> FPLocations { get; set; }
        public virtual DbSet<GivingBirthVac> GivingBirthVacs { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Hour> Hours { get; set; }
        public virtual DbSet<HRRegTBL> HRRegTBLs { get; set; }
        public virtual DbSet<JobLocation> JobLocations { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobTransaction> JobTransactions { get; set; }
        public virtual DbSet<JobType> JobTypes { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<LegationApplication> LegationApplications { get; set; }
        public virtual DbSet<LegationGroup> LegationGroups { get; set; }
        public virtual DbSet<Legation> Legations { get; set; }
        public virtual DbSet<LegationSpend> LegationSpends { get; set; }
        public virtual DbSet<LegationSpend2> LegationSpend2 { get; set; }
        public virtual DbSet<LegationSpendF> LegationSpendFs { get; set; }
        public virtual DbSet<LegationSpendF2> LegationSpendF2 { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<LoansTrx> LoansTrxes { get; set; }
        public virtual DbSet<Major> Majors { get; set; }
        public virtual DbSet<MarriageVac> MarriageVacs { get; set; }
        public virtual DbSet<MedicalExamination> MedicalExaminations { get; set; }
        public virtual DbSet<MotherHoodVac> MotherHoodVacs { get; set; }
        public virtual DbSet<OutOfDuty> OutOfDuties { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<PaySlipGroup> PaySlipGroups { get; set; }
        public virtual DbSet<PaySlip> PaySlips { get; set; }
        public virtual DbSet<PaySlipType> PaySlipTypes { get; set; }
        public virtual DbSet<PermissionsSettingsD> PermissionsSettingsDs { get; set; }
        public virtual DbSet<PermissionsTrx> PermissionsTrxes { get; set; }
        public virtual DbSet<PermissionsType> PermissionsTypes { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<PromotionQualified> PromotionQualifieds { get; set; }
        public virtual DbSet<PromotionQualifiedEmp> PromotionQualifiedEmps { get; set; }
        public virtual DbSet<PublicFundsDecision> PublicFundsDecisions { get; set; }
        public virtual DbSet<ReplacementVacationBalance> ReplacementVacationBalances { get; set; }
        public virtual DbSet<ReportName> ReportNames { get; set; }
        public virtual DbSet<SalaryInfoPrintAutoNo> SalaryInfoPrintAutoNoes { get; set; }
        public virtual DbSet<SearchField> SearchFields { get; set; }
        public virtual DbSet<SecurityAttSchd> SecurityAttSchds { get; set; }
        public virtual DbSet<SendSm> SendSms { get; set; }
        public virtual DbSet<SeniorityTable> SeniorityTables { get; set; }
        public virtual DbSet<SerialNumber> SerialNumbers { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<ShiftsTrx> ShiftsTrxes { get; set; }
        public virtual DbSet<SportsVacationD> SportsVacationDs { get; set; }
        public virtual DbSet<SuddenFP> SuddenFPs { get; set; }
        public virtual DbSet<SuddenFPD> SuddenFPDs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TerminationReason> TerminationReasons { get; set; }
        public virtual DbSet<TmpAttendTrx> TmpAttendTrxes { get; set; }
        public virtual DbSet<TmpAttendTrx2> TmpAttendTrx2 { get; set; }
        public virtual DbSet<TrainingTrx> TrainingTrxes { get; set; }
        public virtual DbSet<TrainingTrxApp> TrainingTrxApps { get; set; }
        public virtual DbSet<TrainingTrxAppLegationDay> TrainingTrxAppLegationDays { get; set; }
        public virtual DbSet<TrainingTrxLegationDay> TrainingTrxLegationDays { get; set; }
        public virtual DbSet<TransMonthe> TransMonthes { get; set; }
        public virtual DbSet<TransToBank> TransToBanks { get; set; }
        public virtual DbSet<TransToBankEmp> TransToBankEmps { get; set; }
        public virtual DbSet<TransToBankLegation> TransToBankLegations { get; set; }
        public virtual DbSet<TransToBankLegationEmp> TransToBankLegationEmps { get; set; }
        public virtual DbSet<TravelType> TravelTypes { get; set; }
        public virtual DbSet<University> Universities { get; set; }
        public virtual DbSet<UpdateAttendTrx> UpdateAttendTrxes { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<VacationApplication> VacationApplications { get; set; }
        public virtual DbSet<VacationApplicationImage> VacationApplicationImages { get; set; }
        public virtual DbSet<VacationBalance> VacationBalances { get; set; }
        public virtual DbSet<VacationLaw> VacationLaws { get; set; }
        public virtual DbSet<Vacation> Vacations { get; set; }
        public virtual DbSet<VacationSubtraction> VacationSubtractions { get; set; }
        public virtual DbSet<VacationTransferD> VacationTransferDs { get; set; }
        public virtual DbSet<VacationTransferDEmp> VacationTransferDEmps { get; set; }
        public virtual DbSet<VacationTrx> VacationTrxes { get; set; }
        public virtual DbSet<WeekDaysName> WeekDaysNames { get; set; }
        public virtual DbSet<WorkDay> WorkDays { get; set; }
        public virtual DbSet<WorkDaysTrx> WorkDaysTrxes { get; set; }
        public virtual DbSet<WorkDaysTrxEmp> WorkDaysTrxEmps { get; set; }
        public virtual DbSet<WorkerContract> WorkerContracts { get; set; }
        public virtual DbSet<WorkersDecision> WorkersDecisions { get; set; }
        public virtual DbSet<WorkersDecisionsEmp> WorkersDecisionsEmps { get; set; }
        public virtual DbSet<YearlyIncrease> YearlyIncreases { get; set; }
        public virtual DbSet<YearlyIncreaseD> YearlyIncreaseDs { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<PayslipInfo> PayslipInfoes { get; set; }
        public virtual DbSet<TmpJob> TmpJobs { get; set; }
        public virtual DbSet<TransToBankLog> TransToBankLogs { get; set; }
        public virtual DbSet<ActionsLog> ActionsLogs { get; set; }
        public virtual DbSet<AttendanceEmpView> AttendanceEmpViews { get; set; }
        public virtual DbSet<AttendanceGroupsAll> AttendanceGroupsAlls { get; set; }
        public virtual DbSet<AttendanceGroupsView> AttendanceGroupsViews { get; set; }
        public virtual DbSet<AttendTrxEmployeesView> AttendTrxEmployeesViews { get; set; }
        public virtual DbSet<AttendTrxView> AttendTrxViews { get; set; }
        public virtual DbSet<BioStarTrxView> BioStarTrxViews { get; set; }
        public virtual DbSet<BioStarTrxView2> BioStarTrxView2 { get; set; }
        public virtual DbSet<BlackList> BlackLists { get; set; }
        public virtual DbSet<BlackListReason> BlackListReasons { get; set; }
        public virtual DbSet<BlackListSerial> BlackListSerials { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<BranchesPerm> BranchesPerms { get; set; }
        public virtual DbSet<CheckInOutDetail> CheckInOutDetails { get; set; }
        public virtual DbSet<CHECKINOUTFirst> CHECKINOUTFirsts { get; set; }
        public virtual DbSet<CHECKINOUTLast> CHECKINOUTLasts { get; set; }
        public virtual DbSet<CHECKINOUTSQLDate> CHECKINOUTSQLDates { get; set; }
        public virtual DbSet<CHECKINOUTVIEW> CHECKINOUTVIEWs { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClassificationNoView> ClassificationNoViews { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DecesionAbsenceNormalDeductionView> DecesionAbsenceNormalDeductionViews { get; set; }
        public virtual DbSet<DecisionEndService_ROW_NUMBER> DecisionEndService_ROW_NUMBER { get; set; }
        public virtual DbSet<DecisionNormalVacation_ROW_NUMBER> DecisionNormalVacation_ROW_NUMBER { get; set; }
        public virtual DbSet<DecisionNormalVacationView> DecisionNormalVacationViews { get; set; }
        public virtual DbSet<DecisionOutOfDutyGroupView> DecisionOutOfDutyGroupViews { get; set; }
        public virtual DbSet<DecisionReplacementVacationView> DecisionReplacementVacationViews { get; set; }
        public virtual DbSet<DecisionSingleOutOfDutyView> DecisionSingleOutOfDutyViews { get; set; }
        public virtual DbSet<DecisionWorkerVacationView> DecisionWorkerVacationViews { get; set; }
        public virtual DbSet<DecResumeWorkVac> DecResumeWorkVacs { get; set; }
        public virtual DbSet<DecResumeWorkVacsSearch> DecResumeWorkVacsSearches { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<EmployeesUserNamesView> EmployeesUserNamesViews { get; set; }
        public virtual DbSet<EmpVacationBalance> EmpVacationBalances { get; set; }
        public virtual DbSet<EndServiceView> EndServiceViews { get; set; }
        public virtual DbSet<FixedJobsView> FixedJobsViews { get; set; }
        public virtual DbSet<HolidaysDatesView> HolidaysDatesViews { get; set; }
        public virtual DbSet<LegationApplicationView> LegationApplicationViews { get; set; }
        public virtual DbSet<LegationGroupEmpView> LegationGroupEmpViews { get; set; }
        public virtual DbSet<LegationSpendView> LegationSpendViews { get; set; }
        public virtual DbSet<LegationSpendView2> LegationSpendView2 { get; set; }
        public virtual DbSet<LegationsView> LegationsViews { get; set; }
        public virtual DbSet<LicenseType> LicenseTypes { get; set; }
        public virtual DbSet<LoansCount> LoansCounts { get; set; }
        public virtual DbSet<LoansMonth> LoansMonths { get; set; }
        public virtual DbSet<MedicalExaminationView> MedicalExaminationViews { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MyDate> MyDates { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<OutOfDutySpendView2> OutOfDutySpendView2 { get; set; }
        public virtual DbSet<OutOfDutyView> OutOfDutyViews { get; set; }
        public virtual DbSet<Outsider> Outsiders { get; set; }
        public virtual DbSet<PermissionsTrxView> PermissionsTrxViews { get; set; }
        public virtual DbSet<PhoneGroup> PhoneGroups { get; set; }
        public virtual DbSet<PhoneIndex> PhoneIndexes { get; set; }
        public virtual DbSet<QEmployee> QEmployees { get; set; }
        public virtual DbSet<QryAttendance> QryAttendances { get; set; }
        public virtual DbSet<QryAttendanceGroupsTrx> QryAttendanceGroupsTrxes { get; set; }
        public virtual DbSet<QryAttendTrx> QryAttendTrxes { get; set; }
        public virtual DbSet<QryBranchesPerm> QryBranchesPerms { get; set; }
        public virtual DbSet<QryEmployeeService> QryEmployeeServices { get; set; }
        public virtual DbSet<QryHoliday> QryHolidays { get; set; }
        public virtual DbSet<QryMyDate> QryMyDates { get; set; }
        public virtual DbSet<QryPermissionsSettingsD> QryPermissionsSettingsDs { get; set; }
        public virtual DbSet<QrySecurityAttSchd> QrySecurityAttSchds { get; set; }
        public virtual DbSet<QryShiftsTrx> QryShiftsTrxes { get; set; }
        public virtual DbSet<QryUsersPerm> QryUsersPerms { get; set; }
        public virtual DbSet<ReceivePaySlip> ReceivePaySlips { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<Reminder> Reminders { get; set; }
        public virtual DbSet<ReplacementVacationView> ReplacementVacationViews { get; set; }
        public virtual DbSet<SmsMessage> SmsMessages { get; set; }
        public virtual DbSet<SmsType> SmsTypes { get; set; }
        public virtual DbSet<SocialState> SocialStates { get; set; }
        public virtual DbSet<System> Systems { get; set; }
        public virtual DbSet<SystemsUser> SystemsUsers { get; set; }
        public virtual DbSet<UserInfoView> UserInfoViews { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersEmployee> UsersEmployees { get; set; }
        public virtual DbSet<UsersPerm> UsersPerms { get; set; }
        public virtual DbSet<VacantJob> VacantJobs { get; set; }
        public virtual DbSet<VacationApplicationsView> VacationApplicationsViews { get; set; }
        public virtual DbSet<VacationDay> VacationDays { get; set; }
        public virtual DbSet<Vacations_38> Vacations_38 { get; set; }
        public virtual DbSet<VacationsCountedView> VacationsCountedViews { get; set; }
        public virtual DbSet<VacationTrxView> VacationTrxViews { get; set; }
        public virtual DbSet<VacBalanceAfter38> VacBalanceAfter38 { get; set; }
        public virtual DbSet<VacBalanceBefore38> VacBalanceBefore38 { get; set; }
        public virtual DbSet<VacBalanceRep> VacBalanceReps { get; set; }
        public virtual DbSet<VacBalanceShort> VacBalanceShorts { get; set; }
        public virtual DbSet<VacNewBalance> VacNewBalances { get; set; }
        public virtual DbSet<ViewAllEmpData> ViewAllEmpDatas { get; set; }
        public virtual DbSet<ViewBank> ViewBanks { get; set; }
        public virtual DbSet<ViewCalcRetirementDate> ViewCalcRetirementDates { get; set; }
        public virtual DbSet<ViewCountDegree> ViewCountDegrees { get; set; }
        public virtual DbSet<ViewDecisionAbsenceDeduction> ViewDecisionAbsenceDeductions { get; set; }
        public virtual DbSet<ViewDecisionAllowance> ViewDecisionAllowances { get; set; }
        public virtual DbSet<ViewDecisionBonu> ViewDecisionBonus { get; set; }
        public virtual DbSet<ViewDecisionCancelDecision> ViewDecisionCancelDecisions { get; set; }
        public virtual DbSet<ViewDecisionChangeJob> ViewDecisionChangeJobs { get; set; }
        public virtual DbSet<ViewDecisionDiscipline> ViewDecisionDisciplines { get; set; }
        public virtual DbSet<ViewDecisionEmployment> ViewDecisionEmployments { get; set; }
        public virtual DbSet<ViewDecisionEndService> ViewDecisionEndServices { get; set; }
        public virtual DbSet<ViewDecisionEndStopHand> ViewDecisionEndStopHands { get; set; }
        public virtual DbSet<ViewDecisionExceptionVacation> ViewDecisionExceptionVacations { get; set; }
        public virtual DbSet<ViewDecisionExpand> ViewDecisionExpands { get; set; }
        public virtual DbSet<ViewDecisionLegation> ViewDecisionLegations { get; set; }
        public virtual DbSet<ViewDecisionMoveEmp> ViewDecisionMoveEmps { get; set; }
        public virtual DbSet<ViewDecisionNormalVacation> ViewDecisionNormalVacations { get; set; }
        public virtual DbSet<ViewDecisionResumeWork> ViewDecisionResumeWorks { get; set; }
        public virtual DbSet<ViewDecision> ViewDecisions { get; set; }
        public virtual DbSet<ViewDecisionSchoolVacation> ViewDecisionSchoolVacations { get; set; }
        public virtual DbSet<ViewDecisionSickVacation> ViewDecisionSickVacations { get; set; }
        public virtual DbSet<ViewDecisionStopHand> ViewDecisionStopHands { get; set; }
        public virtual DbSet<ViewDecisionWorker> ViewDecisionWorkers { get; set; }
        public virtual DbSet<ViewDecisionYearlyIncrease> ViewDecisionYearlyIncreases { get; set; }
        public virtual DbSet<ViewEmp> ViewEmps { get; set; }
        public virtual DbSet<ViewEmpClass> ViewEmpClasses { get; set; }
        public virtual DbSet<ViewEmpData> ViewEmpDatas { get; set; }
        public virtual DbSet<ViewEmpDate> ViewEmpDates { get; set; }
        public virtual DbSet<ViewEmpID> ViewEmpIDs { get; set; }
        public virtual DbSet<ViewEmpPromotion> ViewEmpPromotions { get; set; }
        public virtual DbSet<ViewLegation> ViewLegations { get; set; }
        public virtual DbSet<ViewPromotionDate> ViewPromotionDates { get; set; }
        public virtual DbSet<ViewSalaryList> ViewSalaryLists { get; set; }
        public virtual DbSet<ViewSalaryListSummary> ViewSalaryListSummaries { get; set; }
        public virtual DbSet<ViewVacationApplication> ViewVacationApplications { get; set; }
        public virtual DbSet<ViewVacationLaw> ViewVacationLaws { get; set; }
        public virtual DbSet<ViewVacationList> ViewVacationLists { get; set; }
        public virtual DbSet<WorkDaysNextDay> WorkDaysNextDays { get; set; }
        public virtual DbSet<WorkDaysView> WorkDaysViews { get; set; }
    
        [DbFunction("PayrollEntities", "DateDiffUmElQura")]
        public virtual IQueryable<DateDiffUmElQura_Result> DateDiffUmElQura(Nullable<DateTime> dateFrom, Nullable<DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DateDiffUmElQura_Result>("[PayrollEntities].[DateDiffUmElQura](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollEntities", "fncAttendance")]
        public virtual IQueryable<fncAttendance_Result> fncAttendance(Nullable<DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncAttendance_Result>("[PayrollEntities].[fncAttendance](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncAttendanceGroupsTrx")]
        public virtual IQueryable<fncAttendanceGroupsTrx_Result> fncAttendanceGroupsTrx(Nullable<DateTime> fromDate, Nullable<DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncAttendanceGroupsTrx_Result>("[PayrollEntities].[fncAttendanceGroupsTrx](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncAttendanceTrx")]
        public virtual IQueryable<fncAttendanceTrx_Result> fncAttendanceTrx(Nullable<DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncAttendanceTrx_Result>("[PayrollEntities].[fncAttendanceTrx](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncCountLegation")]
        public virtual IQueryable<fncCountLegation_Result> fncCountLegation(Nullable<short> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncCountLegation_Result>("[PayrollEntities].[fncCountLegation](@year)", yearParameter);
        }
    
        [DbFunction("PayrollEntities", "fncDates")]
        public virtual IQueryable<fncDates_Result> fncDates(Nullable<short> year, Nullable<byte> month, Nullable<byte> calendar)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(byte));
    
            var calendarParameter = calendar.HasValue ?
                new ObjectParameter("Calendar", calendar) :
                new ObjectParameter("Calendar", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncDates_Result>("[PayrollEntities].[fncDates](@Year, @Month, @Calendar)", yearParameter, monthParameter, calendarParameter);
        }
    
        [DbFunction("PayrollEntities", "fncEmpWorkDays")]
        public virtual IQueryable<fncEmpWorkDays_Result> fncEmpWorkDays(Nullable<DateTime> fromDate, Nullable<DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncEmpWorkDays_Result>("[PayrollEntities].[fncEmpWorkDays](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncGetLegations")]
        public virtual IQueryable<fncGetLegations_Result> fncGetLegations(Nullable<short> year, Nullable<byte> month)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncGetLegations_Result>("[PayrollEntities].[fncGetLegations](@Year, @Month)", yearParameter, monthParameter);
        }
    
        [DbFunction("PayrollEntities", "fncMyDates")]
        public virtual IQueryable<fncMyDates_Result> fncMyDates(Nullable<short> year, Nullable<byte> month, Nullable<byte> calendar)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(byte));
    
            var calendarParameter = calendar.HasValue ?
                new ObjectParameter("Calendar", calendar) :
                new ObjectParameter("Calendar", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncMyDates_Result>("[PayrollEntities].[fncMyDates](@Year, @Month, @Calendar)", yearParameter, monthParameter, calendarParameter);
        }
    
        [DbFunction("PayrollEntities", "fncSpeceificDates")]
        public virtual IQueryable<fncSpeceificDates_Result> fncSpeceificDates(Nullable<DateTime> fromDate, Nullable<DateTime> toDate, Nullable<int> empCount)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(DateTime));
    
            var empCountParameter = empCount.HasValue ?
                new ObjectParameter("EmpCount", empCount) :
                new ObjectParameter("EmpCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncSpeceificDates_Result>("[PayrollEntities].[fncSpeceificDates](@FromDate, @ToDate, @EmpCount)", fromDateParameter, toDateParameter, empCountParameter);
        }
    
        [DbFunction("PayrollEntities", "fncSumVacationPeriod")]
        public virtual IQueryable<fncSumVacationPeriod_Result> fncSumVacationPeriod(Nullable<int> year, Nullable<byte> vacationID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var vacationIDParameter = vacationID.HasValue ?
                new ObjectParameter("VacationID", vacationID) :
                new ObjectParameter("VacationID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncSumVacationPeriod_Result>("[PayrollEntities].[fncSumVacationPeriod](@year, @VacationID)", yearParameter, vacationIDParameter);
        }
    
        [DbFunction("PayrollEntities", "fncSumVacations")]
        public virtual IQueryable<fncSumVacations_Result> fncSumVacations(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncSumVacations_Result>("[PayrollEntities].[fncSumVacations](@year)", yearParameter);
        }
    
        [DbFunction("PayrollEntities", "fncVacationBalance")]
        public virtual IQueryable<fncVacationBalance_Result> fncVacationBalance(Nullable<short> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncVacationBalance_Result>("[PayrollEntities].[fncVacationBalance](@year)", yearParameter);
        }
    
        [DbFunction("PayrollEntities", "fncVacationLaw")]
        public virtual IQueryable<fncVacationLaw_Result> fncVacationLaw(Nullable<DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncVacationLaw_Result>("[PayrollEntities].[fncVacationLaw](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncVacationLawWithDate")]
        public virtual IQueryable<fncVacationLawWithDate_Result> fncVacationLawWithDate(Nullable<DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncVacationLawWithDate_Result>("[PayrollEntities].[fncVacationLawWithDate](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollEntities", "fncWorkDays")]
        public virtual IQueryable<fncWorkDays_Result> fncWorkDays(Nullable<DateTime> fromDate, Nullable<DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fncWorkDays_Result>("[PayrollEntities].[fncWorkDays](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollEntities", "ReplacementVacBalances")]
        public virtual IQueryable<ReplacementVacBalances_Result> ReplacementVacBalances(Nullable<int> empID, Nullable<DateTime> myDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var myDateParameter = myDate.HasValue ?
                new ObjectParameter("MyDate", myDate) :
                new ObjectParameter("MyDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ReplacementVacBalances_Result>("[PayrollEntities].[ReplacementVacBalances](@EmpID, @MyDate)", empIDParameter, myDateParameter);
        }
    
        [DbFunction("PayrollEntities", "ShortVacBalances")]
        public virtual IQueryable<ShortVacBalances_Result> ShortVacBalances(Nullable<int> empID, Nullable<DateTime> myDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var myDateParameter = myDate.HasValue ?
                new ObjectParameter("MyDate", myDate) :
                new ObjectParameter("MyDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShortVacBalances_Result>("[PayrollEntities].[ShortVacBalances](@EmpID, @MyDate)", empIDParameter, myDateParameter);
        }
    
        [DbFunction("PayrollEntities", "SplitXml")]
        public virtual IQueryable<SplitXml_Result> SplitXml(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitXml_Result>("[PayrollEntities].[SplitXml](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        [DbFunction("PayrollEntities", "VactionBalancesAfter38")]
        public virtual IQueryable<VactionBalancesAfter38_Result> VactionBalancesAfter38(Nullable<int> empID, Nullable<DateTime> myDate)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var myDateParameter = myDate.HasValue ?
                new ObjectParameter("MyDate", myDate) :
                new ObjectParameter("MyDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VactionBalancesAfter38_Result>("[PayrollEntities].[VactionBalancesAfter38](@EmpID, @MyDate)", empIDParameter, myDateParameter);
        }
    
        [DbFunction("PayrollEntities", "VactionBalancesBefore38")]
        public virtual IQueryable<VactionBalancesBefore38_Result> VactionBalancesBefore38(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VactionBalancesBefore38_Result>("[PayrollEntities].[VactionBalancesBefore38](@EmpID)", empIDParameter);
        }
    
        public virtual int Proc_DecisionEmploymentFooter(Nullable<int> decisionID, string originalPath, byte[] imageData)
        {
            var decisionIDParameter = decisionID.HasValue ?
                new ObjectParameter("DecisionID", decisionID) :
                new ObjectParameter("DecisionID", typeof(int));
    
            var originalPathParameter = originalPath != null ?
                new ObjectParameter("OriginalPath", originalPath) :
                new ObjectParameter("OriginalPath", typeof(string));
    
            var imageDataParameter = imageData != null ?
                new ObjectParameter("ImageData", imageData) :
                new ObjectParameter("ImageData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_DecisionEmploymentFooter", decisionIDParameter, originalPathParameter, imageDataParameter);
        }
    
        public virtual ObjectResult<SelectEmpVacations_Result> SelectEmpVacations(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmpVacations_Result>("SelectEmpVacations", empIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int TransFingerPrintData(Nullable<int> fromEmpID, Nullable<int> toEmpID, string dateFrom, string dateTo)
        {
            var fromEmpIDParameter = fromEmpID.HasValue ?
                new ObjectParameter("FromEmpID", fromEmpID) :
                new ObjectParameter("FromEmpID", typeof(int));
    
            var toEmpIDParameter = toEmpID.HasValue ?
                new ObjectParameter("ToEmpID", toEmpID) :
                new ObjectParameter("ToEmpID", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransFingerPrintData", fromEmpIDParameter, toEmpIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Vacations_SelectEmpVacationsList_Result> Vacations_SelectEmpVacationsList(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vacations_SelectEmpVacationsList_Result>("Vacations_SelectEmpVacationsList", empIDParameter);
        }
    
        public virtual ObjectResult<Vacations_SelectProperties_Result> Vacations_SelectProperties(Nullable<int> year, Nullable<int> empID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vacations_SelectProperties_Result>("Vacations_SelectProperties", yearParameter, empIDParameter);
        }
    
        public virtual int InsertCities(Nullable<short> cityId, string cityName, Nullable<bool> @default, string statementType)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(short));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var defaultParameter = @default.HasValue ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(bool));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCities", cityIdParameter, cityNameParameter, defaultParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<UpdateCities_Result> UpdateCities(Nullable<short> cityId, string cityName, Nullable<bool> @default, string statementType)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(short));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var defaultParameter = @default.HasValue ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(bool));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCities_Result>("UpdateCities", cityIdParameter, cityNameParameter, defaultParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Insert_Update_Select_Delete_Cities_Result> Insert_Update_Select_Delete_Cities(Nullable<short> cityId, string cityName, Nullable<bool> @default, string statementType)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(short));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var defaultParameter = @default.HasValue ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(bool));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Insert_Update_Select_Delete_Cities_Result>("Insert_Update_Select_Delete_Cities", cityIdParameter, cityNameParameter, defaultParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<Insert_Update_Select_Delete_Nationalities_Result> Insert_Update_Select_Delete_Nationalities(Nullable<short> natId, string natName, Nullable<bool> isSaudi, Nullable<bool> idNoCheck, string countryCode, string eMP_NATIONALITY, Nullable<bool> uploaded, string statementType)
        {
            var natIdParameter = natId.HasValue ?
                new ObjectParameter("NatId", natId) :
                new ObjectParameter("NatId", typeof(short));
    
            var natNameParameter = natName != null ?
                new ObjectParameter("NatName", natName) :
                new ObjectParameter("NatName", typeof(string));
    
            var isSaudiParameter = isSaudi.HasValue ?
                new ObjectParameter("IsSaudi", isSaudi) :
                new ObjectParameter("IsSaudi", typeof(bool));
    
            var idNoCheckParameter = idNoCheck.HasValue ?
                new ObjectParameter("IdNoCheck", idNoCheck) :
                new ObjectParameter("IdNoCheck", typeof(bool));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var eMP_NATIONALITYParameter = eMP_NATIONALITY != null ?
                new ObjectParameter("EMP_NATIONALITY", eMP_NATIONALITY) :
                new ObjectParameter("EMP_NATIONALITY", typeof(string));
    
            var uploadedParameter = uploaded.HasValue ?
                new ObjectParameter("Uploaded", uploaded) :
                new ObjectParameter("Uploaded", typeof(bool));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Insert_Update_Select_Delete_Nationalities_Result>("Insert_Update_Select_Delete_Nationalities", natIdParameter, natNameParameter, isSaudiParameter, idNoCheckParameter, countryCodeParameter, eMP_NATIONALITYParameter, uploadedParameter, statementTypeParameter);
        }
    
        public virtual ObjectResult<EmployeesInfo_Result> EmployeesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeesInfo_Result>("EmployeesInfo");
        }
    
        public virtual ObjectResult<GetDecisionChangeJobForPrint_Result> GetDecisionChangeJobForPrint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDecisionChangeJobForPrint_Result>("GetDecisionChangeJobForPrint");
        }
    
        public virtual ObjectResult<GetDecisionEmploymentForPrint_Result> GetDecisionEmploymentForPrint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDecisionEmploymentForPrint_Result>("GetDecisionEmploymentForPrint");
        }
    
        public virtual ObjectResult<GetDecisionMoveEmpForPrint_Result> GetDecisionMoveEmpForPrint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDecisionMoveEmpForPrint_Result>("GetDecisionMoveEmpForPrint");
        }
    
        public virtual ObjectResult<GetDecisionNewJobForPrint_Result> GetDecisionNewJobForPrint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDecisionNewJobForPrint_Result>("GetDecisionNewJobForPrint");
        }
    
        public virtual ObjectResult<GetDecisionWorkersForPrint_Result> GetDecisionWorkersForPrint()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDecisionWorkersForPrint_Result>("GetDecisionWorkersForPrint");
        }
    
        public virtual ObjectResult<GetMonthsNames_Result> GetMonthsNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthsNames_Result>("GetMonthsNames");
        }
    }
}
